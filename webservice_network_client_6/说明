github使用说明

1，下载git客户端
下载地址：https://git-scm.com/download/win
当前版本： Git-2.22.0-64-bit
库地址：https://github.com/jlord/git-it.git
GUI客户端：https://www.git-scm.com/downloads/guis
在线帮助文档：https://www.git-scm.com/docs
在线中文帮助文档：https://git-scm.com/book/zh/v2
2，配置GIT
（一）基础配置
（1）环境配置
Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：
/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。
~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。
当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。
每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。
在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\Users\$USER）的 .gitconfig 文件。 Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。
（2）用户信息
当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。
很多 GUI 工具都会在第一次运行时帮助你配置这些信息。
（3）配置默认编辑器
$ git config --global core.editor emacs
（4）检查配置信息
$ git config --list
git config user.name    检查特定配置参数
（4）获取帮助
若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册：
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
例如，要想获得 config 命令的手册，执行 （本地网页）
$ git help config
（二）日常操作
（1）获取 Git 仓库
初始化目录
在现有目录中初始化仓库
如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：
$ git init
克隆现有的仓库
$ git clone https://github.com/jlord/git-it.git
$ git clone https://github.com/jlord/git-it.git mygitit
这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。
记录每次更新到仓库
Untracked  Unmodified Modified Staged
未跟踪     未修改    已修改    暂存区
检查当前文件状态
$ git status
跟踪新文件
$ git add Newfile.txt
Untracked files:
暂存已修改文件
$ git add  filename
Changes not staged for commit
忽略文件
$ cat .gitignore
*.[oa]
*~
第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
文件 .gitignore 的格式规范如下：
所有空行或者以 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式可以以（/）开头防止递归。
匹配模式可以以（/）结尾指定目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
查看已暂存和未暂存的修改
如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。 稍后我们会详细介绍 git diff，你可能通常会用它来回答这两个问题：当前做的哪些更新还没有暂存？ 有哪些更新已经暂存起来准备好了下次提交？ 尽管 git status 已经通过在相应栏下列出文件名的方式回答了这个问题，git diff 将通过文件补丁的格式显示具体哪些行发生了改变。
$ git status
$ git diff
git diff --cached    查看已暂存的将要添加到下次提交里的内容，
git diff --staged    查看已暂存的将要添加到下次提交里的内容，（1.6.1后版本）
git difftool         图形化的比较查看工具
提交更新
$ git commit
跳过使用暂存区域
$ git commit -a 选项   Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤



